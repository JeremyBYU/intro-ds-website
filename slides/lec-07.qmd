---
title: "CISC482 - Lecture07"
subtitle: "Data Exploration"
author: "Dr. Jeremy Castagno"
footer:  "[https://jeremybyu.github.io/intro-ds-website](https://jeremybyu.github.io/intro-ds-website/)"
logo: "../images/logo.png"
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    show-slide-number: all 
    chalkboard: true
    code-copy: false
editor: visual
execute:
  freeze: auto

---


```{python}
#| context: setup
#| include: false
import pandas as pd
import seaborn as sns 
import numpy as np
from sklearn.datasets import make_blobs
from palmerpenguins import load_penguins, load_penguins_raw
df = load_penguins()
sns.set_style('whitegrid')
sns.set_context("poster", font_scale=1.25)
np.set_printoptions(precision=3, suppress=True, formatter={'float_kind': "{:.3f}".format})
np.random.seed(1)

```

# Class Business


## Schedule

- Reading 3-2: Feb 8 @ 12PM, Wednesday
- Reading 4-1: Feb 10 @ 12PM, Friday
- Reading 4-2: Feb 15 @ 12PM, Wednesday
- **HW3: Feb 15 @ Midnight, Wednesday**


## CS Faculty Candidate

- Razuan Hossain is here on Friday
- Please attend a meet and greet at 3:15 in SBSC 112 
- Extra Credit!


# Data Plotting Tools

## [Matplotlib](https://matplotlib.org/)

- Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. 
- The most popular graphic library (**2D** and 3D)
- Out of the box, plots are functional but don't look *too* nice

## Matplotlib Example

```{=html}
<iframe width="1280" height="600" src="https://matplotlib.org/stable/gallery/lines_bars_and_markers/bar_colors.html#sphx-glr-gallery-lines-bars-and-markers-bar-colors-py" title="Matplotlib"></iframe>
```


## Seaborn

- Seaborn is a Python data visualization library based on matplotlib
- Nice and simple api that integrates very nicely with pandas
- Just pass it a data frame and call functions like
  - `histplot`
  - `scatterplot` 
  - `relplot`
  - `boxplot` 

## [Seaborn Examples](https://seaborn.pydata.org/examples/index.html)

```{=html}
<iframe width="1280" height="600" src="https://seaborn.pydata.org/examples/index.html" title="Seaborn"></iframe>
```



# Visualizing Data with *one** feature

## Bar Chart

- A bar chart:  groups on one axis, rectangles with heights that represent the number of samples. 

```{python}
#| echo: True
#| code-fold: true
species_count = df.groupby(['species'])['species'].count()
ax = sns.barplot(x=species_count.index.values, y=species_count.values)
ax.bar_label(ax.containers[0])
ax;
```

## Numerical Features

- Sometimes we want visualize numerical features
- We are interested in showing users the *variation* of this feature
- Histograms
- Density Plots
- Box Plots


## Histogram Bar Chart

## Histogram Bar Chart

::: columns

:::{.smaller .column width="50%"}

::: {.r-stack}

::: {.fragment .fade-out}
- Dividing the numerical feature into small regions and then count the number of values in each region
- Notice - axis have labels!
- Notice - bar widths are small enough that you can see the distributions shape
:::

::: {.fragment .fade-up}
- What do you notice about this distribution?
- What is (roughly) the most likely flipper length
:::

:::

:::


::: {.column width="50%"}


```{python}
#| echo: True
#| code-fold: true
ax = sns.histplot(data=df, x="flipper_length_mm");
```


:::

:::


## Histogram Bar Horizontal Bar Chart

::: columns

:::{.smaller .column width="50%"}

- Sometimes its better to have the bar chart grow horizontal

:::


::: {.column width="50%"}


```{python}
#| echo: True
#| code-fold: true
species_count = df.groupby(['species'])['species'].count()
ax = sns.barplot(data=df, y="island", x="body_mass_g", errorbar=None)
ax.bar_label(ax.containers[0]);
```


:::

:::


## Density Plot

::: columns

:::{.smaller .column width="50%"}

- A plot that **approximates** the density function of the distribution for the feature. 
- Density plots can be thought of as a smoothed histogram

:::

::: {.column width="50%"}


```{python}
#| echo: True
#| code-fold: true
ax = sns.kdeplot(data=df, x="body_mass_g");
```

:::

:::

## Density Plot with Histogram

```{python}
#| echo: True
#| code-fold: true
ax = sns.histplot(data=df, x="body_mass_g", kde=True);
```


## Density Plot with Histogram, Hue

```{python}
#| echo: True
#| code-fold: true
ax = sns.histplot(data=df, x="body_mass_g", kde=True, hue='species');
```


## Box Plot

::: columns

:::{.smaller .column width="50%"}

- A visual representation of the summary:
  - minimum, maximum
  - first quartile, median, third quartiles
  - outliers

:::

::: {.column width="50%"}


```{python}
#| echo: True
#| code-fold: true
ax = sns.boxplot(data=df, x="body_mass_g");
```

:::

:::


## Boxen Plot

::: columns

:::{.smaller .column width="50%"}

- Plots more quantiles
- Provides more information about the shape of the distribution, particularly in the tails.
- 50%, 25%, 12.5%, 6.25%, 3.13%

:::

::: {.column width="50%"}


```{python}
#| echo: True
#| code-fold: true
ax = sns.boxenplot(data=df, x="body_mass_g");
```

:::

:::
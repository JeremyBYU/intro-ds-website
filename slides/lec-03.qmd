---
title: "CISC482 - Lecture03"
subtitle: "Statistics"
author: "Dr. Jeremy Castagno"
footer:  "[https://jeremybyu.github.io/intro-ds-website](https://jeremybyu.github.io/intro-ds-website/)"
logo: "../images/logo.png"
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    show-slide-number: all 
    chalkboard: true
    code-copy: false
editor: visual
execute:
  freeze: auto

---


```{python}
#| context: setup
#| include: false
import pandas as pd
import seaborn as sns 
import numpy as np
from palmerpenguins import load_penguins, load_penguins_raw
sns.set_style('whitegrid')
sns.set_context("poster", font_scale=1.25)
np.set_printoptions(precision=3, suppress=True, formatter={'float_kind': "{:.3f}".format})
np.random.seed(1)

```

# Class Business

## Schedule

- Reading 2-2: Jan 27 @ 12PM, Friday
- Reading 2-3: 
- HW2: Feb 1 @ Midnight, Wed

# Data Collection

## Stats for data science

- Data science relies on statistics to make data driven decisions
- Sampling methods are used to efeciently collect data and reduce bias

::: {.callout-note .smaller}
**Bias** - anything that leads to a systematic difference between the true parameters of a population and the statistics used to estimate those parameters.  E.g., sampling only men.
:::

## Stats for data science

:::: {.columns}

::: {.smaller .column width="40%"}
- Descriptive statistics -> explore visualizations
- Inferential statistics -> modeling and estimation
- Statisitcs is foundational to ensure results are interpreted correctly
:::

::: {.column width="60%"}
![](./lec03_images/stats_intro.png)
:::

::::

::: {.notes}
Speaker notes go here.
:::

## Sampling

- **Population** - Entire set of individuals, items, or events of interest
- **Observational Unit** - individual item or event
- **Sample** - *subset* of observational units from the population

## Types of Sampling

::: incremental
- Random Sampling
  - OU are selected at random
- Stratified Sampling
  - Population is divided into groups (primary feature). Each group is sampled.
- Cluster Sampling
  - Population divided into groups (not a primary feature, geography)
- Systematic Sampling
  - Every k'th observational unit is sampled
- Convenience Sampling
  - OU are selected that are easier   
:::

## Observational vs Experiement

- Observational
  - Observing or collecting data
  - Not trying to control or influence an outcome
- Experimental
  - You are controlling a varaible
  - You manipulate that variable to get a different response


## Descriptive Statistics

## Oveview

- Terminology
- Measure of center
- Measure of spread
- Measure of position
- Measure of shape

## Terminology

- **Descriptive Statistics** - summarize and describe a features important characteristics
- **distribution** - the possible values the feature can take
- **cluster** - a distinct group of neighboring values in a distribution
- **tails** - the end values of a distributution

## Terminology - Visualized

![](./lec03_images/descriptive_stats.png){fig-align="center"}

## Measure of Center

- **Mean** - average, sum of all values divided by the total number of values, *n*
$$
\frac{1}{n} \sum_{i=i}^{n} x_{i} 
$$
- **Median** - the middle value of the ordered data

![](./lec03_images/median_mean.png){fig-align="center"}

## Code Example!

```{python}
#| echo: true
#| code-line-numbers: 1|2|3
heights = [5.5, 5.7, 5.8, 5.9]
avg_height = sum(heights) / len(heights)
print(f"Average Height: {avg_height:.2f}")
```

<br>

::: fragment
**Using Numpy** 
```{python}
#| echo: true
#| code-line-numbers: 1|2|3|4
import numpy as np
heights = np.array([5.5, 5.7, 5.8, 5.9, 6.2])
avg_height = np.average(heights)
print(f"Average Height: {avg_height:.2f}")
```
:::

## What is NumPy

- NumPy is **the fundamental package** for scientific computing in Python. 
- Python library that provides a multidimensional array object. 
- Stores data *very* effeciently \rightarrow very fast

::: fragment
```python
a = np.array([1, 2])
```
:::
  
::: fragment
2D array - rows and columns
```python
b = np.array([
  [1, 2], # first row
  [3, 4]  # second row
])
```
:::

## Question

`np.average(...)` - finds the average

::: callout-tip
What function to get the median?
:::

:::fragment
```{python}
#| echo: true
heights = np.array([5.5, 5.7, 5.8, 5.9, 6.2])
median_height = np.median(heights)
print(f"Median Height: {median_height:.2f}")
```
:::

# Descriptive Stats

## Spread

```{python}
from sklearn.datasets import make_blobs
X, y = make_blobs(n_samples=200, centers=2, n_features=1,cluster_std=[0.5, 2], random_state=0)

df = pd.DataFrame(data={"children": X.flatten(), "y": y})
df['Graduate'] = "Yes"
df.loc[df['y'] == 0, ["Graduate"]]= "No"
g = sns.displot(df, x="children", col="Graduate", binwidth=0.25)
g.set_titles("Gradaute: {col_name} ");
```


## Spread Terminology

- **range** - distance between the min and max
- **interquartile range (IQR)** - range of the middle 50% 
- **variance** - the **average squared distance** between a feature and its discribution *mean*


$$
\sigma^2 = Var(x) = \frac{\sum_{i=1}^{n} (x_i - \bar{x} )^2}{n-1}
$$

- Standard deviation - $\sigma = sqrt(Var(X))$

## Postion Terminology (Quantiles)

![](./lec03_images/iqr.png)

## Example

```{python}
sns.catplot(df, x="children", y="Graduate",  kind="box", height=6, aspect=2);
```


## Measures of Shape


![](./lec03_images/shape_measure.png){fig-align="center"}

- **Skewness** - measure of the amount and direction of skew
- **Kurtosis** - measure of tail heaviness

# Code

## Mean

```{python}
#| echo: true
                            # mean,  std,    n
samples = np.random.normal(loc=5.0, scale=1, size=11)
samples
```
How would I get the mean?

::: fragment
```{python}
#| echo: true
print(np.mean(samples))
```
:::

## Standard Deviation

::: fragment
```{python}
#| echo: true
std = np.std(samples)
print(f"The standard deviation is: {std:.2f}")
```
:::

::: fragment
The variance?
:::

::: fragment
```{python}
#| echo: true
var = std * std
print(f"The variance is: {var:.2f}")
```
:::

## Quantiles

::: fragment
```{python}
#| echo: true
samples_sorted = np.sort(samples)
print(samples_sorted)
```
:::

::: fragment
Getting the quantile
:::

::: fragment
```{python}
#| echo: true
fifty_percent_quantile = np.quantile(samples, 0.50)
median = np.median(samples)

print(f"{fifty_percent_quantile:.3f}")
print(f"{median:.3f}")
```
:::

::: fragment
```{python}
#| echo: true
quantiles = np.quantile(samples, [0.25, 0.5, 0.75])

print(quantiles)
```
:::


## Shape

Advanced statistics -> I recommend using the library `scipy`. This library is built on top of `numpy` but has more functionality.

::: fragment
```{python}
#| echo: true
from scipy.stats import skewnorm
samples_skewed = skewnorm.rvs(3, loc=15, scale=2, size=1000)
samples = skewnorm.rvs(0, loc=5, scale=1, size=1000)
```

```{python}
df_samples = np.concatenate([samples_skewed, samples], axis=0)
df = pd.DataFrame(data={"value": df_samples})
df['Skewed?'] = True
df.loc[1000:, ['Skewed?']] = False
sns.displot(data=df, x="value", hue="Skewed?", multiple="stack", height=4, aspect=3, binwidth=0.25)
```

:::


## Skewness and Kurtosis

Calculate the [skewness](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skew.html)

::: fragment
```{python}
#| echo: true
import scipy.stats as stats
print(f"Skewed sample data set, skewnewss is: {stats.skew(samples_skewed):.3f}")
print(f"Normal sample data set, skewnewss is: {stats.skew(samples):.3f}")
```
:::


::: fragment

Calculate the [kurtosis](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html#scipy.stats.kurtosis)

```{python}
#| echo: true
import scipy.stats as stats
print(f"Skewed sample data set, kurtosis is: {stats.kurtosis(samples_skewed):.3f}")
print(f"Normal sample data set, kurtosis is: {stats.kurtosis(samples):.3f}")
```
:::

::: fragment

::: callout-warning
This skewed distribution is not very good at demonstrating kurtosis.
:::

::: 


## All


```{python}
#| echo: true
import scipy.stats as stats
stats.describe(samples)
```

